{"version":3,"sources":["components/header/header.js","components/footer/footer.js","components/form/form.js","components/help/help.js","components/if/if.js","components/result.js","components/history/hostiry.js","components/main/main.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","data-testid","to","Footer","Form","props","setUrl","e","preventDefault","setState","url","target","value","setMethod","method","handdelBody","body","handleSubmit","a","request","state","fetchdata","undefined","onSubmit","this","onInput","fill","type","onClick","onChange","React","Component","Help","render","condition","children","If","Children","map","child","cloneElement","Then","Else","require","Result","loading","id","data","countForm","padding","resultFrom","History","calls","console","log","Object","keys","key","callback","handdel","Main","handdelUpdate","count","result","results","handdelFetch","toggle","req","obj","hash","md5","JSON","stringify","history","setHistory","localStorage","setItem","fetch","mode","headers","then","json","parse","getItem","exact","path","App","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.2ffe862d.chunk.js","sourcesContent":["import React from 'react';\nimport './header.scss';\nimport { Link, NavLink } from 'react-router-dom';\n\n\nconst Header = () => {\n  return (\n\n\n\n    <header className=\"App-header\" data-testid='test'>\n\n      <h1> RESTy</h1>\n      <nav>\n        <ul>\n          <li>\n            <Link to='/' >Home</Link>\n          </li>\n\n          <li>\n            <NavLink to='/history'>History</NavLink>\n          </li>\n          <li>\n            <NavLink to='/help'>Help</NavLink>\n          </li>\n        </ul>\n      </nav>\n\n    </header>\n  )\n};\n\nexport default Header;","import React from 'react';\nimport './footer.scss';\n\nconst Footer = () => {\n  return (\n    <footer className=\"App-footer\" >\n      <p data-testid='test'>&copy 2020 Code Fellows</p>\n    </footer>\n  )\n};\n\nexport default Footer; ","import React from 'react';\nimport './main.scss';\n\nclass Form extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            method: 'get',\n            url: '',\n            // placeUrl: '',\n            // placeMethod: '',\n            body: undefined\n\n        };\n\n    };\n\n    setUrl = e => {\n        e.preventDefault();\n        this.setState({ url: e.target.value })\n\n    };\n\n    setMethod = e => {\n        e.preventDefault();\n        this.setState({ method: e.target.value })\n    }\n\n    handdelBody = e => {\n        e.preventDefault();\n        this.setState({ body: e.target.value })\n    }\n\n\n\n    handleSubmit = async e => {\n\n        e.preventDefault();\n        // this.setState({ placeUrl: this.state.url });\n        // this.setState({ placeMethod: this.state.method });\n        let request=this.state;\n        this.props.fetchdata(request);\n\n\n    }\n\n\n\n\n\n\n\n    render() {\n        return (\n            <div>\n                <section className=\"form\">\n                    <form className=\"form\" onSubmit={this.handleSubmit}>\n                        <fieldset >\n                            <legend>URL</legend>\n                            <input onInput={this.setUrl}  value={this.props.fill.url} data-testid='input'/>\n                            <button type='submit' value=\"Submit\" className=\"button\">GO!</button>\n                        </fieldset>\n\n\n                        <fieldset >\n                            <legend>Method</legend>\n                            <button onClick={this.setMethod} value='get'>GET </button>\n                            <button onClick={this.setMethod} value='post'>POST</button>\n                            <button onClick={this.setMethod} value='put'>PUT</button>\n                            <button onClick={this.setMethod} value='delete'>DELETE</button>\n                        </fieldset>\n                        \n                        <fieldset >\n                            <legend>Body</legend>\n                        <textarea onChange={this.handdelBody} value={this.props.fill.body}  ></textarea>\n                        </fieldset>\n\n\n                    </form>\n                </section>\n\n                {/* <div className='Show'>\n                    <span> {this.state.method} </span>\n                    <span> {this.state.url} </span>\n                </div> */}\n\n            </div>\n\n        )\n    }\n\n};\n\nexport default Form;","import React from 'react';\n\nconst Help = () => {\n    return (\n\n        <div className='helpApp'>\n            <p>\n                help page\n            </p>\n        </div>\n\n    )\n};\n\nexport default Help; ","import React from 'react';\n\nconst render = (condition = false, children = null) => {\n    return condition ? children : null;\n}\n\n\nexport const If = props => {\n    return (\n        React.Children.map(props.children, child => React.cloneElement(child, {\n            condition: props.condition\n        })\n        )\n    )\n}\n\nexport const Then = props => render(props.condition, props.children);\nexport const Else = props => render(!props.condition, props.children);","import React from 'react';\n// import ReactJson from 'react-json-view';\nimport JSONPretty from 'react-json-pretty';\nimport { If, Then, Else } from './if/if.js';\n\nimport './result.scss';\n\nrequire('react-json-pretty/themes/monikai.css');\n\n\n\nconst Result = (props) => {\n    // console.log('result',props)\n    // console.log('count',props.countForm)\n    return (\n        <div>\n            <If condition={props.loading}>\n\n\n                <Then>\n                    <div id=\"overlay\">\n                        <div>\n                            <p>l</p>\n                            <p>o</p>\n                            <p>a</p>\n                            <p>d</p>\n                            <p>i</p>\n                            <p>n</p>\n                            <p>g</p>\n                        </div>\n\n\n                    </div>\n\n                </Then>\n\n\n                <Else>\n                    <section className=\"ResultApp\">\n                        Count: <JSONPretty data={props.countForm} padding={4} data-testid='test'></JSONPretty>\n                        Result:<JSONPretty data={props.resultFrom} padding={4} data-testid='results'></JSONPretty>\n                    </section>\n                </Else>\n\n            </If>\n\n        </div>\n    )\n\n}\n\nexport default Result;\n","import React from 'react';\nimport {  Link } from 'react-router-dom';\nimport './history.scss';\n\nfunction History(props) {\n\n    // console.log('You are in history',props.calls);\n    const calls = props.calls || {};\n    console.log('call',calls);\n\n    function handdelClick(callback) {\n        console.log(callback)\n        props.handdel(callback);\n     }\n\n    return (\n        <aside className=\"App-history\">\n            <h3>History Search</h3>\n            <ul>\n                {\n                    Object.keys(calls).map(key =>\n                        <li key={key}>\n                            <button className='urlButton'   onClick={() =>  handdelClick(props.calls[key])} >\n                                  \n                                <Link to='/'> {props.calls[key].method} </Link>\n                                 </button>\n                            <span className='methodUrl'>\n                                {props.calls[key].url}\n\n                            </span>\n\n                        </li>\n                    )\n                }\n            </ul>\n        </aside >\n    )\n\n}\n\nexport default History;\n\n","import React from 'react';\nimport { Route, Switch } from 'react-router-dom';\nimport md5 from 'md5';\n\n\n// import Header from './components/header/header';\n// import Footer from './components/footer/footer';\nimport Form from '../form/form';\nimport Help from '../help/help.js';\nimport Result from '../result';\nimport History from '../history/hostiry.js';\n\n\nclass Main extends React.Component {\n\n\n    constructor(props) {\n        super(props)\n        this.state = {\n            count: 0,\n            result: [],\n            req: {},\n            history: JSON.parse(localStorage.getItem('history')),\n            loading: false,\n        }\n    }\n\n    handdelUpdate = (data) => {\n        // console.log('data', data)\n        this.setState({ count: data.count, result: data.results })\n        // console.log('result',this.state.result)\n    }\n\n\n\n    handdelFetch = (request) => {\n        this.toggle();\n\n        // console.log('update1', this.state.loading)\n        this.setState({ req: request });\n\n        let url = request.url;\n        let method = request.method;\n        let body = request.body\n        console.log('req', request)\n        let obj = { method, url, body };\n\n        let hash = md5(JSON.stringify(this.state.req));\n        console.log('hash', hash);\n        let history = { ...this.state.history, [hash]: obj };\n        this.setState({ history: history });\n        let setHistory = JSON.stringify(this.state.history);\n        localStorage.setItem('history', setHistory);\n\n\n        fetch(url, {\n            method: method,\n            mode: 'cors',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify(body)\n        }).then(data => data.json())\n            .then(results => {\n                this.toggle();\n                this.handdelUpdate(results);\n\n            })\n\n\n    }\n\n\n    toggle = () => {\n        this.setState({ loading: !this.state.loading });\n        // console.log('update', this.state.loading)\n\n    }\n\n\n\n    render() {\n        return (\n            <main>\n                <Switch>\n\n                    <Route exact path='/'>\n                        <Form fetchdata={this.handdelFetch} fill={this.state.req} />\n                        <Result resultFrom={this.state.result} loading={this.state.loading} countForm={this.state.count} />\n                    </Route>\n\n                    <Route exact path='/history'>\n                        <History calls={this.state.history} handdel={this.handdelFetch} />\n                    </Route>\n\n                    <Route exact path='/help' data-testid='input'>\n                        <Help />\n                    </Route>\n\n                </Switch>\n            </main>\n        )\n    }\n}\n\nexport default Main;","import React from 'react';\nimport { BrowserRouter } from 'react-router-dom';\n\nimport './style/base.scss';\n\n\nimport Header from './components/header/header';\nimport Footer from './components/footer/footer';\nimport Main from './components/main/main.js';\n// import Result from './components/result';\n// import History from './components/history/hostiry.js';\n\n\nclass App extends React.Component {\n  // constructor(props) {\n  //   super(props)\n  //   this.state = {\n  //     count: 0,\n  //     result: [],\n  //     req: {},\n  //     history: JSON.parse(localStorage.getItem('history')),\n  //     loading: false,\n  //   }\n  // }\n\n\n  // handdelUpdate = (data) => {\n  //   // console.log('data', data)\n  //   this.setState({ count: data.count, result: data.results })\n  //   // console.log('result',this.state.result)\n  // }\n\n\n\n  // handdelFetch = (request) => {\n  //   this.toggle();\n\n  //   // console.log('update1', this.state.loading)\n  //   this.setState({ req: request });\n\n  //   let url = request.url;\n  //   let method = request.method;\n  //   let body = request.body\n  //   console.log('req', request)\n  //   let obj = { method, url, body };\n\n  //   let hash = md5(JSON.stringify(this.state.req));\n  //   console.log('hash', hash);\n  //   let history = { ...this.state.history, [hash]: obj };\n  //   this.setState({ history: history });\n  //   let setHistory = JSON.stringify(this.state.history);\n  //   localStorage.setItem('history', setHistory);\n\n\n  //   fetch(url, {\n  //     method: method,\n  //     mode: 'cors',\n  //     headers: { 'Content-Type': 'application/json' },\n  //     body: JSON.stringify(body)\n  //   }).then(data => data.json())\n  //     .then(results => {\n  //       this.toggle();\n  //       this.handdelUpdate(results);\n\n  //     })\n\n\n  // }\n\n\n  // toggle = () => {\n  //   this.setState({ loading: !this.state.loading });\n  //   // console.log('update', this.state.loading)\n\n  // }\n\n  render() {\n\n    return (\n    // <React.Fragment >\n    //   <Header/>\n    //   <Main fetchdata={this.handdelFetch} />\n    //   <History calls={this.state.history} handdel={this.handdelFetch} />\n    //   <Result resultFrom={this.state.result} loading={this.state.loading} countForm={this.state.count}/>\n    //   <Footer />\n    // </React.Fragment >\n\n    <BrowserRouter>\n     <Header data-testid='main'/>\n     <Main />\n     <Footer/>\n    </BrowserRouter>\n    )\n  }\n};\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}